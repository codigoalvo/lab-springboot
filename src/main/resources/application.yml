# Spring properties
server:
  port: 8080
  servlet.context-path: /lab-springboot/

#flyway.baseline-on-migrate: true

spring:
  jackson.deserialization.fail-on-unknown-properties: true
  h2.console:
      enabled: true
      path: /h2
  jpa:
    show-sql: true
    properties.hibernate:
      ddl-auto: none
      jdbc.lob.non_contextual_creation: true

codigoalvo:
  security.enable-https: false

logging.level:
  codigoalvo: TRACE

spring.profiles.active: dev-h2-mem, oauth2-security

---
spring:
  profiles: dev-psql
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=public
    username: postgres
    password: postgres
  jpa:
    hibernate:
      ddl-auto: validate

---
spring:
  profiles: heroku
  jpa:
    database: {JDBC_DATABASE}
  datasource:
    url: {JDBC_DATABASE_URL}
    username: {JDBC_DATABASE_USERNAME}
    password: {JDBC_DATABASE_PASSWORD}

server:
  port: 80
  servlet.context-path: /

codigoalvo:
  security:
    enable-https: true
    allowedOrigin: https://codigoalvo-lab-angular.herokuapp.com

---
spring:
  profiles: dev-h2-mem
  datasource:
    driverClassName: org.h2.Driver
    url: jdbc:h2:mem:lab
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: validate

---
spring:
  profiles: dev-h2-mem-tcp   #Precisa estar rodando o H2 como serviço TCP
  datasource:
    driverClassName: org.h2.Driver
    url: jdbc:h2:tcp://localhost:9095/mem:lab
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: validate

---
spring:
  profiles: dev-h2-file   #Precisa estar rodando o H2 como serviço TCP
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:tcp://localhost:9095/file:~/lab.h2;DB_CLOSE_ON_EXIT=FALSE;IFEXISTS=TRUE;DB_CLOSE_DELAY=-1;
    username: sa
    password:
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: validate

---